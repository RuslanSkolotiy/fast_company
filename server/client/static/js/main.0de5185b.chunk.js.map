{"version":3,"sources":["reportWebVitals.js","services/localStorageService.js","services/authService.js","services/httpService.js","utils/mockData.js","loyout/mainPage.jsx","components/common/form/textField.jsx","utils/validator.js","components/common/form/checkboxField.jsx","services/userService.js","utils/history.js","utils/generateAuthError.js","store/users.js","components/ui/loginForm.jsx","components/common/form/selectField.jsx","components/common/form/radioField.jsx","components/common/form/multiSelectField.jsx","services/qualityService.js","store/qualities.js","services/professionService.js","store/professions.js","components/ui/registerForm.jsx","loyout/loginPage.jsx","components/common/pagination.jsx","components/common/groupList.jsx","components/ui/searchStatus.jsx","lib.js","components/common/table/teableHeader.jsx","components/common/table/tableBody.jsx","components/common/table/index.js","components/common/table/table.jsx","components/ui/usersTable.jsx","components/common/bookmark.jsx","components/ui/qualities/quality.jsx","components/ui/qualities/index.js","components/ui/qualities/qualitiesList.jsx","components/ui/searchRow.jsx","components/ui/profession.jsx","components/page/userListPage/index.js","components/page/userListPage/userListPage.jsx","utils/paginate.js","components/common/avatar.jsx","components/ui/userCard.jsx","components/ui/qualitiesCard.jsx","components/ui/meetingsCard.jsx","components/common/form/textareaField.jsx","services/commentService.js","store/comments.js","components/ui/comments/newCommentForm.jsx","utils/dateFormat.js","components/ui/comments/comment.jsx","components/ui/comments/commentsList.jsx","components/page/userPage/index.js","components/page/userPage/userPage.jsx","components/page/userEditPage/index.js","components/page/userEditPage/userEditPage.jsx","components/ui/hoc/usersLoader.jsx","loyout/usersPage.jsx","components/ui/navProfile.jsx","components/ui/mainMenu.jsx","components/common/protectedRoute.jsx","loyout/logoutPage.jsx","components/ui/hoc/appLoader.jsx","app.js","store/createStore.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TOKEN_KEY","REFRESH_KEY","EXPIRES_KEY","USERID_KEY","setTokens","refreshToken","accessToken","userId","expiresIn","expiresDate","Date","getTime","localStorage","setItem","localStorageService","getAccessToken","getItem","getRefreshToken","getExpiresDate","getUserId","removeAuthData","removeItem","httpAuth","axios","create","baseURL","config","apiEndPoint","params","key","process","REACT_APP_FIREBASE_KEY","authService","register","payload","a","post","data","login","email","password","returnSecureToken","refresh","grant_type","refresh_token","http","configFile","interceptors","request","use","isExpired","now","isFireBase","containSlash","test","url","slice","idToken","id_token","expires_in","localId","user_id","headers","Authorization","console","log","error","Promise","reject","response","res","content","_id","Object","keys","map","status","toast","info","httpService","get","put","delete","patch","useMockData","statusConst","useState","setError","setStatus","progress","setProgress","count","setCount","summuryCount","professions","length","qualities","users","incrementCount","PrevState","prof","quality","user","useEffect","newProgress","Math","floor","updateProggres","initialize","MainPage","className","onClick","TextField","label","name","value","onChange","type","showPassword","setShowPassword","htmlFor","id","target","defaultProps","validator","formData","errors","validate","vlidateMethod","statusValidate","trim","message","fieldName","CheckboxField","children","checked","userEndPoint","userService","update","fetchAll","getCurrentUser","history","createBrowserHistory","generateAuthError","startsWith","initialState","entities","isLoading","auth","isLoggedIn","dataLoaded","userSlice","createSlice","reducers","usersRequested","state","usersReceived","action","usersRequestFiled","authRequested","authRequestSuccess","authRequestFiled","userUpdateRequested","userUpdated","index","findIndex","item","userUpdateFiled","userLoggedOut","usersReducer","reducer","actions","updateUser","dispatch","loadUsersList","getState","getUserById","find","LoginForm","useHistory","useDispatch","rememberMe","setFormData","setErrors","loginError","useSelector","changeHandler","prevState","validarotConfig","isRequired","isEmail","hasCapitalSymbol","hasNumber","minLength","maxLength","isValid","onSubmit","event","preventDefault","redirect","location","from","pathname","push","code","errorMessage","disabled","SelectField","options","defaultOption","showValid","optionsArray","Array","isArray","option","valid","RadioField","onHandleChange","i","MultiSelectField","closeMenuOnSelect","isMulti","classNamePrefix","qualityEndPoint","qualityService","qualitiesSlice","lastFetch","qualitiesRequested","qualitiesReceived","qualitiesRequestFiled","qualitiesReducer","loadQualitiesList","date","professionEndPoint","professionService","professionsSlice","professionsRequested","professionsReceived","professionsRequestFiled","professionsReducer","RegisterForm","profession","sex","license","qualitiesList","q","newData","LoginPage","useParams","formType","setFormType","toggleFormType","role","Pagination","elementsCount","onPage","currentPage","onPageChange","calcPages","ceil","href","tabIndex","e","page","GroupList","items","onItemSelect","selectedItem","valueProperty","contentProperty","SearchStatus","usersCount","headerClass","join","number","renderPhrase","TableHeader","onSort","selectedSort","columns","path","sort","order","scope","TableBody","renderContent","column","component","_","Table","UserTable","Bookmark","onToggle","style","marked","Quality","color","Qualities","ids","qualitiesArray","qualId","SearchRow","onSearch","placeholder","Profession","getProfessionById","propTypes","PropTypes","string","UserListPage","searchString","setSearchString","currentUserId","onBookmarkToggle","setCurrentPage","isProfessionsLoading","selectedProf","setSelectedProf","sortBy","setSortBy","filteredUsers","filter","toLowerCase","includes","cropUsers","paginate","orderBy","clearFilter","to","completedMeetings","rate","resetSearchHadler","Avatar","hash","width","height","alt","src","UserCard","onEditUserClick","QualitiesCard","MeetingsCard","TextareaField","rows","commentEndPoint","commentService","fetchByPage","equalTo","commentsSlice","commentsRequested","commentsReceived","commentsRequestFiled","commentRemoveRequested","commentRemoved","commentId","commentRemoveFiled","commentCreateRequested","commentCreated","commentCreateFiled","commentsReducer","NewCommentForm","pageId","comment","newComment","monthNames","padding","String","padStart","dateFormat","dateString","diff","getFullYear","getMonth","getDate","getHours","getMinutes","Comment","onDeleteClick","created_at","CommentsList","comments","onDeleteCommentHandler","loadCommentsList","b","UserPage","UserEditPage","currentUser","setTimeout","isQualitiesLoading","handleSubmit","goBackHandler","qualityId","UsersLoader","dataStatus","oneOfType","arrayOf","node","UsersPage","userID","edit","mode","NavProfile","isOpen","setOpen","MainMenu","exact","activeClassName","ProtectedRoute","Component","rest","render","props","LogoutPage","AppLoader","usersStatusLoading","App","rootReducer","combineReducers","store","configureStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0de5185b.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","const TOKEN_KEY = \"jwt-token\"\nconst REFRESH_KEY = \"jwt-refresh-token\"\nconst EXPIRES_KEY = \"jwt-expires\"\nconst USERID_KEY = \"user-local-id\"\n\nexport const setTokens = ({\n    refreshToken,\n    accessToken,\n    userId,\n    expiresIn = 3600\n}) => {\n    const expiresDate = new Date().getTime() + expiresIn * 1000\n    localStorage.setItem(TOKEN_KEY, accessToken)\n    localStorage.setItem(REFRESH_KEY, refreshToken)\n    localStorage.setItem(EXPIRES_KEY, expiresDate)\n    localStorage.setItem(USERID_KEY, userId)\n}\n\nexport const getAccessToken = () => {\n    return localStorage.getItem(TOKEN_KEY)\n}\n\nexport const getRefreshToken = () => {\n    return localStorage.getItem(REFRESH_KEY)\n}\n\nexport const getExpiresDate = () => {\n    return localStorage.getItem(EXPIRES_KEY)\n}\n\nexport const getUserId = () => {\n    return localStorage.getItem(USERID_KEY)\n}\n\nexport const removeAuthData = () => {\n    localStorage.removeItem(TOKEN_KEY)\n    localStorage.removeItem(REFRESH_KEY)\n    localStorage.removeItem(EXPIRES_KEY)\n    localStorage.removeItem(USERID_KEY)\n}\nconst localStorageService = {\n    setTokens,\n    getAccessToken,\n    getRefreshToken,\n    getExpiresDate,\n    getUserId,\n    removeAuthData\n}\n\nexport default localStorageService\n","import axios from \"axios\"\nimport localStorageService from \"./localStorageService\"\nimport config from \"../config.json\"\n\nconst httpAuth = axios.create({\n    baseURL: config.apiEndPoint + \"/auth/\",\n    params: {\n        key: process.env.REACT_APP_FIREBASE_KEY\n    }\n})\n\nconst authService = {\n    register: async (payload) => {\n        const { data } = await httpAuth.post(\"signUp\", payload)\n        return data\n    },\n    login: async ({ email, password }) => {\n        const { data } = await httpAuth.post(\"signInWithPassword\", {\n            email,\n            password,\n            returnSecureToken: true\n        })\n        return data\n    },\n    refresh: async () => {\n        const { data } = await httpAuth.post(\"token\", {\n            grant_type: \"refresh_token\",\n            refresh_token: localStorageService.getRefreshToken()\n        })\n        return data\n    }\n}\n\nexport default authService\n","import axios from \"axios\"\nimport { toast } from \"react-toastify\"\nimport configFile from \"../config.json\"\nimport localStorageService from \"./localStorageService\"\nimport authService from \"./authService\"\n\nconst http = axios.create({\n    baseURL: configFile.apiEndPoint\n})\n\nhttp.interceptors.request.use(\n    async (config) => {\n        const expiresDate = localStorageService.getExpiresDate()\n        const refreshToken = localStorageService.getRefreshToken()\n        const isExpired = refreshToken && expiresDate < Date.now()\n\n        if (configFile.isFireBase) {\n            const containSlash = /\\/$/gi.test(config.url)\n            config.url =\n                (containSlash ? config.url.slice(0, -1) : config.url) + \".json\"\n\n            if (isExpired) {\n                const data = await authService.refresh()\n                localStorageService.setTokens({\n                    refreshToken: data.refresh_token,\n                    idToken: data.id_token,\n                    expiresIn: data.expires_in,\n                    localId: data.user_id\n                })\n            }\n        } else {\n            if (isExpired) {\n                const data = await authService.refresh()\n                localStorageService.setTokens(data)\n            }\n            const accessToken = localStorageService.getAccessToken()\n            if (accessToken) {\n                config.headers = {\n                    ...config.headers,\n                    Authorization: `Bearer ${accessToken}`\n                }\n            }\n            console.log(\" config.headers\", config.headers)\n        }\n        return config\n    },\n    (error) => {\n        return Promise.reject(error)\n    }\n)\n\nfunction transformData(data) {\n    return data && !data._id\n        ? Object.keys(data).map((key) => ({ ...data[key] }))\n        : data\n}\n\nhttp.interceptors.response.use(\n    (res) => {\n        if (configFile.isFireBase) {\n            res.data = { content: transformData(res.data) }\n        } else {\n            res.data = { content: res.data }\n        }\n        return res\n    },\n    (error) => {\n        const expectedErrors =\n            error.response &&\n            error.response.status >= 400 &&\n            error.response.status < 500\n        if (!expectedErrors) {\n            console.log(\"Unexpected error\")\n            toast.info(\"Something was wrong. Try it later\")\n        }\n        return Promise.reject(error)\n    }\n)\n\nconst httpService = {\n    get: http.get,\n    post: http.post,\n    put: http.put,\n    delete: http.delete,\n    patch: http.patch\n}\nexport default httpService\n","import professions from \"../mockData/professions.json\"\r\nimport qualities from \"../mockData/qualities.json\"\r\nimport users from \"../mockData/users.json\"\r\nimport { useEffect, useState } from \"react\"\r\nimport httpService from \"../services/httpService\"\r\n\r\nconst useMockData = () => {\r\n    const statusConst = {\r\n        idle: \"Not started\",\r\n        pending: \"In process\",\r\n        successed: \"Ready\",\r\n        error: \"Error occured\"\r\n    }\r\n    const [error, setError] = useState(null)\r\n    const [status, setStatus] = useState(statusConst.idle)\r\n    const [progress, setProgress] = useState(0)\r\n    const [count, setCount] = useState(0)\r\n    const summuryCount = professions.length + qualities.length + users.length\r\n    const incrementCount = () => {\r\n        setCount((PrevState) => PrevState + 1)\r\n    }\r\n    const updateProggres = () => {\r\n        if (count !== 0 && status === statusConst.idle) {\r\n            setStatus(statusConst.pending)\r\n        }\r\n        const newProgress = Math.floor((count / summuryCount) * 100)\r\n        if (progress < newProgress) setProgress(() => newProgress)\r\n        if (newProgress === 100) setStatus(statusConst.successed)\r\n    }\r\n    useEffect(() => {\r\n        updateProggres()\r\n    }, [count])\r\n\r\n    async function initialize() {\r\n        try {\r\n            for (const prof of professions) {\r\n                await httpService.put(\"profession/\" + prof._id, prof)\r\n                incrementCount()\r\n            }\r\n            for (const quality of qualities) {\r\n                await httpService.put(\"quality/\" + quality._id, quality)\r\n                incrementCount()\r\n            }\r\n            for (const user of users) {\r\n                await httpService.put(\"user/\" + user._id, user)\r\n                incrementCount()\r\n            }\r\n        } catch (e) {\r\n            setError(e)\r\n            setStatus(statusConst.error)\r\n        }\r\n    }\r\n\r\n    return { error, initialize, progress, status }\r\n}\r\nexport default useMockData\r\n","import React from \"react\"\nimport useMockData from \"../utils/mockData\"\n\nconst MainPage = () => {\n    const { error, initialize, progress, status } = useMockData()\n    const onClickHandler = () => {\n        initialize()\n    }\n    return (\n        <div className=\"container mt-5\">\n            <h2>Main page</h2>\n            <h3>Инициализация данных в firebase</h3>\n            <ul>\n                <li>Status: {status}</li>\n                <li>Progress: {progress}%</li>\n                {error && <li>Error: {error}</li>}\n            </ul>\n            <button className=\"btn btn-primary\" onClick={onClickHandler}>\n                Инициализация\n            </button>\n        </div>\n    )\n}\n\nexport default MainPage\n","import React, { useState } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst TextField = ({ label, name, value, onChange, type, error }) => {\n    const [showPassword, setShowPassword] = useState(false)\n    const toggleShowPassword = () => {\n        setShowPassword(!showPassword)\n    }\n\n    const onHandleChange = ({ target }) => {\n        const { name, value } = target\n        onChange({ name, value })\n    }\n\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor={name} className=\"form-label\">\n                {label}\n            </label>\n            <div className=\"input-group has-validation\">\n                <input\n                    type={showPassword ? \"text\" : type}\n                    name={name}\n                    id={name}\n                    value={value}\n                    onChange={onHandleChange}\n                    className={\n                        \"form-control\" + (!error ? \" is-valid\" : \" is-invalid\")\n                    }\n                />\n                {type === \"password\" && (\n                    <button\n                        onClick={toggleShowPassword}\n                        className=\"btn btn-outline-secondary\"\n                    >\n                        <i\n                            className={\n                                \"bi \" +\n                                (showPassword ? \"bi-eye-slash\" : \"bi-eye\")\n                            }\n                        ></i>\n                    </button>\n                )}\n                {error && <div className=\"invalid-feedback\">{error}</div>}\n            </div>\n        </div>\n    )\n}\nTextField.defaultProps = {\n    type: \"text\"\n}\nTextField.propTypes = {\n    label: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    type: PropTypes.string,\n    error: PropTypes.string\n}\n\nexport default TextField\n","export function validator(formData, config) {\n    const errors = {}\n    function validate(vlidateMethod, value, config) {\n        let statusValidate\n        switch (vlidateMethod) {\n            case \"isRequired\":\n                if (typeof value === \"boolean\") {\n                    statusValidate = !value\n                } else {\n                    statusValidate = value.trim() === \"\"\n                }\n\n                break\n            case \"isEmail\":\n                statusValidate = !/^\\S+@\\S+\\.\\S+$/.test(value)\n                break\n            case \"hasCapitalSymbol\":\n                statusValidate = !/[A-Z]+/.test(value)\n                break\n            case \"hasNumber\":\n                statusValidate = !/\\d+/.test(value)\n                break\n            case \"minLength\":\n                statusValidate = value.length < config.value\n                break\n            case \"maxLength\":\n                statusValidate = value.length > config.value\n                break\n            default:\n                break\n        }\n        if (statusValidate) return config.message\n    }\n    for (const fieldName in formData) {\n        for (const vlidateMethod in config[fieldName]) {\n            const error = validate(\n                vlidateMethod,\n                formData[fieldName],\n                config[fieldName][vlidateMethod]\n            )\n            if (error && !errors[fieldName]) {\n                errors[fieldName] = error\n            }\n        }\n    }\n    return errors\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst CheckboxField = ({ children, name, onChange, value, error }) => {\n    const onHandleChange = ({ target }) => {\n        const { name, checked } = target\n        onChange({ name, value: checked })\n    }\n\n    return (\n        <div className=\"mb-4\">\n            <div className=\"form-check\">\n                <input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    checked={value}\n                    id={name}\n                    name={name}\n                    onChange={onHandleChange}\n                />\n                <label\n                    className={\n                        \"form-check-label\" + (error ? \" is-invalid\" : \"\")\n                    }\n                    htmlFor={name}\n                >\n                    {children}\n                </label>\n                <div className=\"invalid-feedback\">{error}</div>\n            </div>\n        </div>\n    )\n}\n\nCheckboxField.propTypes = {\n    onChange: PropTypes.func,\n    name: PropTypes.string,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ]),\n    value: PropTypes.bool,\n    error: PropTypes.string\n}\n\nexport default CheckboxField\n","import httpService from \"./httpService\"\nimport localStorageService from \"./localStorageService\"\n\nconst userEndPoint = \"user/\"\n\nconst userService = {\n    update: async (id, content) => {\n        const { data } = await httpService.patch(userEndPoint + id, content)\n        return data\n    },\n    get: async (id) => {\n        const { data } = await httpService.get(userEndPoint + id)\n        return data\n    },\n    fetchAll: async () => {\n        const { data } = await httpService.get(userEndPoint)\n        return data\n    },\n    create: async (content) => {\n        const { data } = await httpService.post(userEndPoint, content)\n        return data\n    },\n    delete: async (id) => {\n        const { data } = await httpService.delete(userEndPoint + id)\n        return data\n    },\n    getCurrentUser: async () => {\n        const id = localStorageService.getUserId()\n        const { data } = await httpService.get(userEndPoint + id)\n        return data\n    }\n}\n\nexport default userService\n","import { createBrowserHistory } from \"history\"\n\nconst history = createBrowserHistory()\nexport default history\n","export function generateAuthError(message) {\n    switch (true) {\n        case message === \"EMAIL_NOT_FOUND\":\n        case message === \"INVALID_PASSWORD\":\n            return \"Пароль или email неверный\"\n        case message === \"USER_DISABLED\":\n            return \"Учетная запись пользователя отключена администратором\"\n        case message.startsWith(\"TOO_MANY_ATTEMPTS_TRY_LATER\"):\n            return \"Доступ к этой учетной записи был временно отключен из-за множества неудачных попыток входа в систему. Вы можете немедленно восстановить его, сбросив пароль, или можете повторить попытку позже.\"\n        case message === \"EMAIL_EXISTS\":\n            return \"Пользователь с таким email уже существует\"\n        default:\n            return \"Неизвесная ошибка\"\n    }\n}\n","import { createSlice } from \"@reduxjs/toolkit\"\nimport userService from \"../services/userService\"\nimport authService from \"../services/authService\"\nimport localStorageService, { setTokens } from \"../services/localStorageService\"\nimport history from \"../utils/history\"\nimport { generateAuthError } from \"../utils/generateAuthError\"\n\nconst initialState = {\n    entities: null,\n    isLoading: false,\n    error: null,\n    auth: null,\n    isLoggedIn: false,\n    dataLoaded: false\n}\nif (localStorageService.getAccessToken()) {\n    initialState.auth = { userId: localStorageService.getUserId() }\n    initialState.isLoggedIn = true\n    initialState.isLoading = true\n}\n\nconst userSlice = createSlice({\n    name: \"users\",\n    initialState,\n    reducers: {\n        usersRequested: (state) => {\n            state.isLoading = true\n        },\n        usersReceived: (state, action) => {\n            state.entities = action.payload\n            state.isLoading = false\n            state.dataLoaded = true\n        },\n        usersRequestFiled: (state, action) => {\n            state.error = action.payload\n            state.isLoading = false\n        },\n        authRequested: (state) => {\n            state.error = null\n        },\n        authRequestSuccess: (state, action) => {\n            state.auth = { ...action.payload }\n            state.isLoggedIn = true\n        },\n        authRequestFiled: (state, action) => {\n            state.error = action.payload\n        },\n        userUpdateRequested: () => {},\n        userUpdated: (state, action) => {\n            const index = state.entities.findIndex(\n                (item) => item._id === action.payload._id\n            )\n            if (index !== -1) {\n                state.entities[index] = action.payload\n            }\n        },\n        userUpdateFiled: (state, action) => {\n            state.error = action.payload\n        },\n        userLoggedOut: (state) => {\n            state.entities = null\n            state.isLoggedIn = false\n            state.auth = null\n            state.dataLoaded = false\n        }\n    }\n})\n\nconst { reducer: usersReducer, actions } = userSlice\nconst {\n    usersRequested,\n    usersReceived,\n    usersRequestFiled,\n    authRequested,\n    authRequestSuccess,\n    authRequestFiled,\n    userLoggedOut,\n    userUpdateRequested,\n    userUpdated,\n    userUpdateFiled\n} = actions\n\nexport const updateUser = (payload) => async (dispatch) => {\n    dispatch(userUpdateRequested())\n    try {\n        const { content } = await userService.update(payload._id, payload)\n        dispatch(userUpdated(content))\n    } catch (error) {\n        dispatch(userUpdateFiled(error.message))\n    }\n}\nexport const login = ({ payload, redirect }) => {\n    return async (dispatch) => {\n        const { email, password } = payload\n        dispatch(authRequested())\n        try {\n            const data = await authService.login({ email, password })\n            setTokens(data)\n            dispatch(authRequestSuccess({ userId: data.userId }))\n            history.push(redirect)\n        } catch (error) {\n            const { code, message } = error.response.data.error\n            if (code === 400) {\n                const errorMessage = generateAuthError(message)\n                dispatch(authRequestFiled(errorMessage))\n            } else {\n                dispatch(authRequestFiled(error.message))\n            }\n        }\n    }\n}\n\nexport const signUp = (payload) => {\n    return async (dispatch) => {\n        try {\n            dispatch(authRequested())\n            const data = await authService.register(payload)\n            setTokens(data)\n            dispatch(authRequestSuccess({ userId: data.userId }))\n            history.push(\"/users\")\n        } catch (error) {\n            dispatch(authRequestFiled(error.message))\n        }\n    }\n}\n\nexport const logOut = () => {\n    return async (dispatch) => {\n        localStorageService.removeAuthData()\n        history.push(\"/\")\n        dispatch(userLoggedOut())\n    }\n}\n\nexport const loadUsersList = () => async (dispatch, getState) => {\n    dispatch(usersRequested())\n    try {\n        const { content } = await userService.fetchAll()\n        dispatch(usersReceived(content))\n    } catch (error) {\n        dispatch(usersRequestFiled(error.message))\n    }\n}\n\nexport const getUsers = () => (state) => state.users.entities\nexport const getUsersLoadingStatus = () => (state) => state.users.isLoading\n\nexport const getUserById = (id) => (state) => {\n    if (state.users.entities) {\n        return state.users.entities.find((item) => item._id === id)\n    }\n    return undefined\n}\nexport const getIsLoggedIn = () => (state) => {\n    return state.users.isLoggedIn\n}\nexport const getDataStatus = () => (state) => state.users.dataLoaded\nexport const getCurrentUserId = () => (state) => state.users.auth.userId\nexport const getCurrentUserData = () => (state) => {\n    if (state.users.entities) {\n        return state.users.entities.find(\n            (item) => item._id === state.users.auth.userId\n        )\n    }\n    return undefined\n}\nexport const getAuthError = () => (state) => state.users.error\n\nexport default usersReducer\n","import React, { useEffect, useState } from \"react\"\nimport TextField from \"../common/form/textField\"\nimport { validator } from \"../../utils/validator\"\nimport CheckboxField from \"../common/form/checkboxField\"\nimport { useHistory } from \"react-router-dom\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { getAuthError, login } from \"../../store/users\"\n// import * as yup from \"yup\"\n\nconst LoginForm = () => {\n    const history = useHistory()\n    const dispatch = useDispatch()\n    const [formData, setFormData] = useState({\n        email: \"\",\n        password: \"\",\n        rememberMe: false\n    })\n    const [errors, setErrors] = useState({})\n    const loginError = useSelector(getAuthError())\n\n    const changeHandler = ({ name, value }) => {\n        setFormData((prevState) => ({ ...prevState, [name]: value }))\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const redirect = history?.location?.state?.from?.pathname\n            ? history.location.state.from.pathname\n            : \"/\"\n        if (validate()) {\n            dispatch(login({ payload: formData, redirect }))\n        }\n    }\n\n    useEffect(() => {\n        validate()\n    }, [formData])\n\n    const validarotConfig = {\n        email: {\n            isRequired: {\n                message: \"Email is required\"\n            },\n            isEmail: {\n                message: \"Email is incorected\"\n            }\n        },\n        password: {\n            isRequired: {\n                message: \"Password is required\"\n            },\n            hasCapitalSymbol: {\n                message: \"Password must contain an uppercase letter\"\n            },\n            hasNumber: {\n                message: \"Password must contain a digit\"\n            },\n            minLength: {\n                value: 8,\n                message: \"Password must contain at least 8 characters\"\n            },\n            maxLength: {\n                value: 200,\n                message: \"Password must contain no more than 200 characters\"\n            }\n        }\n    }\n\n    // const schema = yup.object().shape({\n    //     email: yup\n    //         .string()\n    //         .required(\"Email is required\")\n    //         .email(\"Email is incorected\"),\n    //     password: yup\n    //         .string()\n    //         .required(\"Email is required\")\n    //         .matches(/(?=.*[A-Z])/, \"Password must contain an uppercase letter\")\n    //         .matches(/(?=.*[0-9])/, \"Password must contain a digit\")\n    //         .matches(\n    //             /(?=.*[!@#$%^&*])/,\n    //             \"Password must contain one of the special symbols !@#$%^&*\"\n    //         )\n    //         .matches(/(?=.{8,})/, \"Password must contain at least 8 characters\")\n    // })\n\n    const validate = () => {\n        const errors = validator(formData, validarotConfig)\n        setErrors(errors)\n        // schema\n        //     .validate(formData)\n        //     .then(() => setErrors({}))\n        //     .catch((err) => setErrors({ [err.path]: err.message }))\n\n        return Object.keys(errors).length === 0\n    }\n    const isValid = Object.keys(errors).length === 0\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField\n                label=\"Email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={changeHandler}\n                error={errors?.email}\n            />\n            <TextField\n                label=\"Password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={changeHandler}\n                type=\"password\"\n                error={errors?.password}\n            />\n            <CheckboxField\n                name=\"rememberMe\"\n                value={formData.rememberMe}\n                onChange={changeHandler}\n            >\n                Remember me\n            </CheckboxField>\n            {loginError && <p className=\"text-danger\">{loginError}</p>}\n            <button\n                disabled={!isValid}\n                className=\"btn btn-primary w-100 mx-auto\"\n            >\n                Submit\n            </button>\n        </form>\n    )\n}\n\nexport default LoginForm\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst SelectField = ({\n    label,\n    name,\n    value,\n    onChange,\n    options,\n    error,\n    defaultOption,\n    showValid\n}) => {\n    const optionsArray =\n        !Array.isArray(options) && typeof options === \"object\"\n            ? Object.keys(options).map((option) => ({\n                name: options[option].name,\n                value: options[option]._id\n            }))\n            : options\n\n    const onHandleChange = ({ target }) => {\n        const { name, value } = target\n        onChange({ name, value })\n    }\n\n    const valid = showValid ? \" is-valid\" : \"\"\n\n    return (\n        <div className=\"mb-4\">\n            {label && (\n                <label htmlFor={name} className=\"form-label\">\n                    {label}\n                </label>\n            )}\n            <select\n                className={\"form-select\" + (!error ? valid : \" is-invalid\")}\n                name={name}\n                id={name}\n                value={value}\n                onChange={onHandleChange}\n            >\n                <option disabled value=\"\">\n                    {defaultOption}\n                </option>\n                {optionsArray.map((option) => (\n                    <option key={option.value} value={option.value}>\n                        {option.name}\n                    </option>\n                ))}\n            </select>\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    )\n}\nSelectField.defaultProps = {\n    type: \"text\",\n    defaultOption: \"\",\n    showValid: false\n}\nSelectField.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    options: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n    error: PropTypes.string,\n    defaultOption: PropTypes.string,\n    showValid: PropTypes.bool\n}\n\nexport default SelectField\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst RadioField = ({ options, name, onChange, value, label }) => {\n    const onHandleChange = ({ target }) => {\n        const { name, value } = target\n        onChange({ name, value })\n    }\n\n    return (\n        <div className=\"mb-4\">\n            <label className=\"form-label\">{label}</label>\n            <div>\n                {options.map((option, i) => (\n                    <div className=\"form-check form-check-inline\" key={i}>\n                        <input\n                            className=\"form-check-input\"\n                            type=\"radio\"\n                            name={name}\n                            id={option.name + \"_\" + option.value}\n                            checked={option.value === value}\n                            value={option.value}\n                            onChange={onHandleChange}\n                        />\n                        <label\n                            className=\"form-check-label\"\n                            htmlFor={option.name + \"_\" + option.value}\n                        >\n                            {option.name}\n                        </label>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default RadioField\n\nRadioField.propTypes = {\n    options: PropTypes.array.isRequired,\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func,\n    value: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired\n}\n","import React from \"react\"\nimport Select from \"react-select\"\nimport PropTypes from \"prop-types\"\n\nconst MultiSelectField = ({ options, onChange, name, label, value }) => {\n    const optionsArray =\n        !Array.isArray(options) && typeof options === \"object\"\n            ? Object.keys(options).map((option) => ({\n                label: options[option].name,\n                value: options[option]._id\n            }))\n            : options\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor={name} className=\"form-label\">\n                {label}\n            </label>\n            <Select\n                closeMenuOnSelect={false}\n                isMulti\n                options={optionsArray}\n                className=\"basic-multi-select\"\n                classNamePrefix=\"select\"\n                value={value}\n                onChange={(value) => onChange({ name, value })}\n            />\n        </div>\n    )\n}\n\nMultiSelectField.propTypes = {\n    options: PropTypes.oneOfType([PropTypes.array, PropTypes.object])\n        .isRequired,\n    onChange: PropTypes.func,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    value: PropTypes.array\n}\n\nexport default MultiSelectField\n","import httpService from \"./httpService\"\r\n\r\nconst qualityEndPoint = \"quality/\"\r\n\r\nconst qualityService = {\r\n    update: async (id, content) => {\r\n        const { data } = await httpService.put(qualityEndPoint + id, content)\r\n        return data\r\n    },\r\n    get: async (id) => {\r\n        const { data } = await httpService.get(qualityEndPoint + id)\r\n        return data\r\n    },\r\n    fetchAll: async () => {\r\n        const { data } = await httpService.get(qualityEndPoint)\r\n        return data\r\n    },\r\n    create: async (content) => {\r\n        const { data } = await httpService.post(qualityEndPoint, content)\r\n        return data\r\n    },\r\n    delete: async (id) => {\r\n        const { data } = await httpService.delete(qualityEndPoint + id)\r\n        return data\r\n    }\r\n}\r\n\r\nexport default qualityService\r\n","import { createSlice } from \"@reduxjs/toolkit\"\nimport qualityService from \"../services/qualityService\"\n\nconst qualitiesSlice = createSlice({\n    name: \"qualities\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null,\n        lastFetch: null\n    },\n    reducers: {\n        qualitiesRequested: (state) => {\n            state.isLoading = true\n        },\n        qualitiesReceived: (state, action) => {\n            state.entities = action.payload\n            state.isLoading = false\n            state.lastFetch = Date.now()\n        },\n        qualitiesRequestFiled: (state, action) => {\n            state.error = action.payload\n            state.isLoading = false\n        }\n    }\n})\n\nconst { reducer: qualitiesReducer, actions } = qualitiesSlice\nconst { qualitiesRequested, qualitiesReceived, qualitiesRequestFiled } = actions\n\nfunction isOutdated(date) {\n    if (Date.now() - date > 10 * 60 * 100) return true\n    return false\n}\n\nexport const loadQualitiesList = () => async (dispatch, getState) => {\n    const { lastFetch } = getState().qualities\n    if (isOutdated(lastFetch)) {\n        dispatch(qualitiesRequested())\n        try {\n            const { content } = await qualityService.fetchAll()\n            dispatch(qualitiesReceived(content))\n        } catch (error) {\n            dispatch(qualitiesRequestFiled(error.message))\n        }\n    }\n}\n\nexport const getQualities = () => (state) => state.qualities.entities\nexport const getQualitiesLoadingStatus = () => (state) =>\n    state.qualities.isLoading\nexport const getQualitiesByIds = (ids) => (state) => {\n    if (state.qualities.entities) {\n        const qualitiesArray = []\n        for (const qualId of ids) {\n            for (const quality of state.qualities.entities) {\n                if (quality._id === qualId) {\n                    qualitiesArray.push(quality)\n                    break\n                }\n            }\n        }\n        return qualitiesArray\n    }\n    return []\n}\nexport default qualitiesReducer\n","import httpService from \"./httpService\"\r\n\r\nconst professionEndPoint = \"profession/\"\r\n\r\nconst professionService = {\r\n    get: async (id) => {\r\n        const { data } = await httpService.get(professionEndPoint + id)\r\n        return data\r\n    },\r\n    fetchAll: async () => {\r\n        const { data } = await httpService.get(professionEndPoint)\r\n        return data\r\n    }\r\n}\r\n\r\nexport default professionService\r\n","import { createSlice } from \"@reduxjs/toolkit\"\nimport professionService from \"../services/professionService\"\n\nconst professionsSlice = createSlice({\n    name: \"professions\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null,\n        lastFetch: null\n    },\n    reducers: {\n        professionsRequested: (state) => {\n            state.isLoading = true\n        },\n        professionsReceived: (state, action) => {\n            state.entities = action.payload\n            state.isLoading = false\n            state.lastFetch = Date.now()\n        },\n        professionsRequestFiled: (state, action) => {\n            state.error = action.payload\n            state.isLoading = false\n        }\n    }\n})\nconst { reducer: professionsReducer, actions } = professionsSlice\nconst { professionsRequested, professionsReceived, professionsRequestFiled } =\n    actions\n\nfunction isOutdated(date) {\n    if (Date.now() - date > 10 * 60 * 100) return true\n    return false\n}\n\nexport const loadProfessionsList = () => async (dispatch, getState) => {\n    const { lastFetch } = getState().professions\n    if (isOutdated(lastFetch)) {\n        dispatch(professionsRequested())\n        try {\n            const { content } = await professionService.fetchAll()\n            dispatch(professionsReceived(content))\n        } catch (error) {\n            dispatch(professionsRequestFiled(error.message))\n        }\n    }\n}\n\nexport const getProfessions = () => (state) => state.professions.entities\nexport const getProfessionsLoadingStatus = () => (state) =>\n    state.professions.isLoading\n\nexport const getProfessionById = (id) => (state) => {\n    if (state.professions.entities) {\n        return state.professions.entities.find((item) => item._id === id)\n    }\n    return undefined\n}\nexport default professionsReducer\n","import React, { useEffect, useState } from \"react\"\nimport TextField from \"../common/form/textField\"\nimport { validator } from \"../../utils/validator\"\nimport SelectField from \"../common/form/selectField\"\nimport RadioField from \"../common/form/radioField\"\nimport MultiSelectField from \"../common/form/multiSelectField\"\nimport CheckboxField from \"../common/form/checkboxField\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { getQualities } from \"../../store/qualities\"\nimport { getProfessions } from \"../../store/professions\"\nimport { signUp } from \"../../store/users\"\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch()\n    const professions = useSelector(getProfessions())\n    const qualities = useSelector(getQualities())\n\n    const [formData, setFormData] = useState({\n        email: \"\",\n        password: \"\",\n        profession: \"\",\n        sex: \"male\",\n        name: \"\",\n        qualities: [],\n        license: false\n    })\n    const [errors, setErrors] = useState({})\n\n    const qualitiesList = qualities.map((q) => ({\n        label: q.name,\n        value: q._id\n    }))\n\n    const changeHandler = ({ name, value }) => {\n        setFormData((prevState) => ({ ...prevState, [name]: value }))\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        if (validate()) {\n            const newData = {\n                ...formData,\n                qualities: formData.qualities.map((q) => q.value)\n            }\n            dispatch(signUp(newData))\n        }\n    }\n\n    useEffect(() => {\n        validate()\n    }, [formData])\n\n    const validarotConfig = {\n        email: {\n            isRequired: {\n                message: \"Email is required\"\n            },\n            isEmail: {\n                message: \"Email is incorected\"\n            }\n        },\n        name: {\n            isRequired: {\n                message: \"Name is required\"\n            }\n        },\n        password: {\n            isRequired: {\n                message: \"Password is required\"\n            },\n            hasCapitalSymbol: {\n                message: \"Password must contain an uppercase letter\"\n            },\n            hasNumber: {\n                message: \"Password must contain a digit\"\n            },\n            minLength: {\n                value: 8,\n                message: \"Password must contain at least 8 characters\"\n            },\n            maxLength: {\n                value: 200,\n                message: \"Password must contain no more than 200 characters\"\n            }\n        },\n        profession: {\n            isRequired: {\n                message: \"Profession is required\"\n            }\n        },\n        license: {\n            isRequired: {\n                message: \"You must agree before submitting.\"\n            }\n        }\n    }\n\n    const validate = () => {\n        const errors = validator(formData, validarotConfig)\n        setErrors(errors)\n        return Object.keys(errors).length === 0\n    }\n    const isValid = Object.keys(errors).length === 0\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField\n                label=\"Email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={changeHandler}\n                error={errors?.email}\n            />\n            <TextField\n                label=\"Name\"\n                name=\"name\"\n                value={formData.name}\n                onChange={changeHandler}\n                error={errors?.name}\n            />\n            <TextField\n                label=\"Password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={changeHandler}\n                type=\"password\"\n                error={errors?.password}\n            />\n            <SelectField\n                label=\"Profession\"\n                name=\"profession\"\n                value={formData.profession}\n                onChange={changeHandler}\n                options={professions.map((profession) => ({\n                    name: profession.name,\n                    value: profession._id\n                }))}\n                error={errors?.profession}\n                defaultOption=\"Choose...\"\n            />\n            <RadioField\n                options={[\n                    { name: \"Male\", value: \"male\" },\n                    { name: \"Female\", value: \"female\" },\n                    { name: \"Other\", value: \"other\" }\n                ]}\n                value={formData.sex}\n                onChange={changeHandler}\n                name=\"sex\"\n                label=\"Sex\"\n            />\n\n            <MultiSelectField\n                options={qualitiesList}\n                onChange={changeHandler}\n                name=\"qualities\"\n                label=\"Qualities\"\n            />\n            <CheckboxField\n                name=\"license\"\n                value={formData.license}\n                onChange={changeHandler}\n                error={errors?.license}\n            >\n                Agree to terms and conditions\n            </CheckboxField>\n            <button\n                disabled={!isValid}\n                className=\"btn btn-primary w-100 mx-auto\"\n            >\n                Submit\n            </button>\n        </form>\n    )\n}\n\nexport default RegisterForm\n","import React, { useState } from \"react\"\nimport { useParams } from \"react-router\"\nimport LoginForm from \"../components/ui/loginForm\"\nimport RegisterForm from \"../components/ui/registerForm\"\n\nconst LoginPage = () => {\n    const { type } = useParams()\n    const [formType, setFormType] = useState(\n        type === \"register\" ? type : \"login\"\n    )\n\n    const toggleFormType = () =>\n        setFormType((prevState) =>\n            prevState === \"register\" ? \"login\" : \"register\"\n        )\n\n    return (\n        <div className=\"container mt-5\">\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3 p-4 shadow\">\n                    {formType === \"register\"\n                        ? (\n                            <>\n                                <h3 className=\"mb-4\">Register</h3>\n                                <RegisterForm />\n                                <p>\n                                Already have account?{\" \"}\n                                    <a onClick={toggleFormType} role=\"button\">\n                                    Sign In\n                                    </a>\n                                </p>\n                            </>\n                        )\n                        : (\n                            <>\n                                <h3 className=\"mb-4\">Login</h3>\n                                <LoginForm />\n                                <p>\n                                Dont have account?{\" \"}\n                                    <a onClick={toggleFormType} role=\"button\">\n                                    Sign Up\n                                    </a>\n                                </p>\n                            </>\n                        )}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LoginPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Pagination = ({ elementsCount, onPage, currentPage, onPageChange }) => {\n    const calcPages = () => {\n        return Math.ceil(elementsCount / onPage)\n    }\n\n    const getPages = () => {\n        return [...Array(calcPages())].map((item, i) => i + 1)\n    }\n\n    const onClick = (e, page) => {\n        e.preventDefault()\n        onPageChange(page)\n    }\n\n    const onIncrement = (e) => {\n        e.preventDefault()\n        onPageChange(currentPage + 1)\n    }\n\n    const onDecrement = (e) => {\n        e.preventDefault()\n        onPageChange(currentPage - 1)\n    }\n\n    if (calcPages() <= 1) {\n        return null\n    }\n\n    return (\n        <nav>\n            <ul className=\"pagination\">\n                <li\n                    className={\n                        \"page-item \" + (currentPage <= 1 ? \"disabled\" : \"\")\n                    }\n                >\n                    <a\n                        href=\"#\"\n                        className=\"page-link\"\n                        tabIndex=\"-1\"\n                        onClick={onDecrement}\n                    >\n                        Previous\n                    </a>\n                </li>\n                {getPages().map((page) => {\n                    return (\n                        <li\n                            className={\n                                \"page-item\" +\n                                (page === currentPage ? \" active\" : \"\")\n                            }\n                            key={page}\n                        >\n                            <a\n                                href=\"#\"\n                                className=\"page-link\"\n                                onClick={(e) => onClick(e, page)}\n                            >\n                                {page}\n                            </a>\n                        </li>\n                    )\n                })}\n\n                <li\n                    className={\n                        \"page-item \" +\n                        (currentPage >= calcPages() ? \"disabled\" : \"\")\n                    }\n                >\n                    <a href=\"#\" className=\"page-link\" onClick={onIncrement}>\n                        Next\n                    </a>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nPagination.propTypes = {\n    elementsCount: PropTypes.number.isRequired,\n    onPage: PropTypes.number.isRequired,\n    currentPage: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired\n}\n\nexport default Pagination\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst GroupList = ({\n    items,\n    onItemSelect,\n    selectedItem,\n    valueProperty,\n    contentProperty\n}) => {\n    return (\n        <ul className=\"list-group\">\n            {Object.keys({ ...items }).map((key) => {\n                const item = items[key]\n                return (\n                    <li\n                        key={item[valueProperty]}\n                        className={\n                            \"list-group-item\" +\n                            (item === selectedItem ? \" active\" : \"\")\n                        }\n                        onClick={() => {\n                            onItemSelect(item)\n                        }}\n                        role=\"button\"\n                    >\n                        {item[contentProperty]}\n                    </li>\n                )\n            })}\n        </ul>\n    )\n}\n\nGroupList.defaultProps = {\n    valueProperty: \"_id\",\n    contentProperty: \"name\"\n}\n\nGroupList.propTypes = {\n    items: PropTypes.oneOfType([\n        PropTypes.object.isRequired,\n        PropTypes.array.isRequired\n    ]),\n    valueProperty: PropTypes.string.isRequired,\n    contentProperty: PropTypes.string.isRequired,\n    onItemSelect: PropTypes.func.isRequired,\n    selectedItem: PropTypes.object\n}\n\nexport default GroupList\n","import React from \"react\"\nimport { countFormat } from \"../../lib\"\nimport PropTypes from \"prop-types\"\n\nconst SearchStatus = ({ usersCount }) => {\n    const renderPhrase = (count) => {\n        if (!count) return `Никто с тобой не тусанёт`\n        return `${count} ${countFormat(count, [\n            \"человек\",\n            \"человека\",\n            \"человек\"\n        ])} тусанёт с тобой сегодня`\n    }\n\n    const headerClass = [\"badge\", usersCount ? \"bg-primary\" : \"bg-danger\"].join(\n        \" \"\n    )\n\n    return (\n        <h2>\n            <span className={headerClass}>{renderPhrase(usersCount)}</span>\n        </h2>\n    )\n}\n\nSearchStatus.propTypes = {\n    usersCount: PropTypes.number.isRequired\n}\n\nexport default SearchStatus\n","export function countFormat(number, titles) {\n    const cases = [2, 0, 1, 1, 1, 2]\n    return titles[\n        number % 100 > 4 && number % 100 < 20\n            ? 2\n            : cases[number % 10 < 5 ? number % 10 : 5]\n    ]\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst TableHeader = ({ onSort, selectedSort, columns }) => {\n    const handleSort = (item) => {\n        if (!item) return\n        if (selectedSort.sort === item && selectedSort.order === \"asc\") {\n            onSort({ sort: item, order: \"desc\" })\n        } else {\n            onSort({ sort: item, order: \"asc\" })\n        }\n    }\n    const sortDirectionArrow = (item) => {\n        if (selectedSort.sort !== item) return \"\"\n        if (selectedSort.order === \"asc\") {\n            return <i className=\"bi bi-caret-up-fill\"></i>\n        } else {\n            return <i className=\"bi bi-caret-down-fill\"></i>\n        }\n    }\n\n    return (\n        <thead>\n            <tr>\n                {Object.keys(columns).map((key) => (\n                    <th\n                        key={key}\n                        onClick={() => handleSort(columns[key].path)}\n                        scope=\"col\"\n                        {...{ role: columns[key].path && \"button\" }}\n                    >\n                        {columns[key].name}\n                        {sortDirectionArrow(columns[key].path)}\n                    </th>\n                ))}\n            </tr>\n        </thead>\n    )\n}\n\nTableHeader.propTypes = {\n    onSort: PropTypes.func.isRequired,\n    selectedSort: PropTypes.object.isRequired,\n    columns: PropTypes.object.isRequired\n}\n\nexport default TableHeader\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport _ from \"lodash\"\n\nconst TableBody = ({ data, columns }) => {\n    const renderContent = (item, column) => {\n        if (columns[column].component) {\n            const component = columns[column].component\n            if (typeof component === \"function\") {\n                return component(item)\n            } else {\n                return component\n            }\n        }\n        return _.get(item, columns[column].path)\n    }\n\n    return (\n        <tbody>\n            {data.map((item) => (\n                <tr key={item._id}>\n                    {Object.keys(columns).map((column) => (\n                        <td key={column}>{renderContent(item, column)}</td>\n                    ))}\n                </tr>\n            ))}\n        </tbody>\n    )\n}\n\nTableBody.propTypes = {\n    data: PropTypes.array.isRequired,\n    columns: PropTypes.object.isRequired\n}\n\nexport default TableBody\n","import Table from \"./table\"\nimport TableBody from \"./tableBody\"\nimport TableHeader from \"./teableHeader\"\nexport default Table\nexport { TableBody, TableHeader }\n","import React from \"react\"\nimport TableHeader from \"./teableHeader\"\nimport TableBody from \"./tableBody\"\nimport PropTypes from \"prop-types\"\n\nconst Table = ({ data, onSort, selectedSort, columns, children }) => {\n    return (\n        <table className=\"table\">\n            {children || (\n                <>\n                    <TableHeader {...{ onSort, selectedSort, columns }} />\n                    <TableBody {...{ data, columns }} />\n                </>\n            )}\n        </table>\n    )\n}\n\nTable.propTypes = {\n    data: PropTypes.array.isRequired,\n    onSort: PropTypes.func.isRequired,\n    selectedSort: PropTypes.object.isRequired,\n    columns: PropTypes.object.isRequired,\n    children: PropTypes.array\n}\n\nexport default Table\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Table, { TableHeader, TableBody } from \"../common/table\"\n\nconst UserTable = ({ users, onSort, selectedSort, columns, ...rest }) => {\n    return (\n        <Table {...{ data: users, onSort, selectedSort, columns }}>\n            <TableHeader {...{ onSort, selectedSort, columns }} />\n            <TableBody {...{ data: users, columns }} />\n        </Table>\n    )\n}\n\nUserTable.propTypes = {\n    users: PropTypes.array.isRequired,\n    onSort: PropTypes.func,\n    selectedSort: PropTypes.object,\n    columns: PropTypes.object.isRequired\n}\n\nexport default UserTable\n","import React from \"react\"\nimport { PropTypes } from \"prop-types\"\n\nconst Bookmark = ({ user, onToggle }) => {\n    const style = \"bi \" + (user.marked ? \"bi-star-fill\" : \"bi-star\")\n    return (\n        <i\n            className={style}\n            role=\"button\"\n            onClick={() => onToggle(user._id)}\n        ></i>\n    )\n}\n\nBookmark.propTypes = {\n    user: PropTypes.object.isRequired,\n    onToggle: PropTypes.func.isRequired\n}\n\nexport default Bookmark\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Quality = ({ quality }) => {\n    const style = [\"badge\", \"m-1\", \"bg-\" + quality.color].join(\" \")\n    return <span className={style}>{quality.name}</span>\n}\n\nQuality.propTypes = {\n    quality: PropTypes.object.isRequired\n}\n\nexport default Quality\n","import Qualities from \"./qualitiesList\"\nexport default Qualities\n","import React, { useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\nimport Quality from \"./quality\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {\n    getQualitiesByIds,\n    getQualitiesLoadingStatus,\n    loadQualitiesList\n} from \"../../../store/qualities\"\n\nconst QualitiesList = ({ qualities }) => {\n    const dispatch = useDispatch()\n    const isLoading = useSelector(getQualitiesLoadingStatus())\n    const qualitiesList = useSelector(getQualitiesByIds(qualities))\n    useEffect(() => {\n        dispatch(loadQualitiesList())\n    }, [])\n    if (isLoading) return \"Loading...\"\n    return (\n        <>\n            {qualitiesList.map((quality) => {\n                return <Quality quality={quality} key={quality._id} />\n            })}\n        </>\n    )\n}\n\nQualitiesList.propTypes = {\n    qualities: PropTypes.array\n}\n\nexport default QualitiesList\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst SearchRow = ({ value, onSearch }) => {\n    return (\n        <div className=\"row\">\n            <div className=\"col-auto w-100\">\n                <div className=\"input-group\">\n                    <input\n                        type=\"text\"\n                        value={value}\n                        className=\"form-control\"\n                        placeholder=\"Search...\"\n                        onChange={({ target }) => onSearch(target.value)}\n                    />\n                    {value && (\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-outline-secondary\"\n                            aria-label=\"Clear\"\n                            onClick={({ target }) => onSearch(\"\")}\n                        >\n                            X\n                        </button>\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nSearchRow.propTypes = {\n    value: PropTypes.string.isRequired,\n    onSearch: PropTypes.func.isRequired\n}\n\nexport default SearchRow\n","import PropTypes from \"prop-types\"\nimport { useSelector } from \"react-redux\"\nimport {\n    getProfessionById,\n    getProfessionsLoadingStatus\n} from \"../../store/professions\"\n\nconst Profession = ({ id }) => {\n    const profession = useSelector(getProfessionById(id))\n    const isLoading = useSelector(getProfessionsLoadingStatus())\n\n    return !isLoading ? profession.name : \"Loading...\"\n}\nProfession.propTypes = {\n    id: PropTypes.string\n}\nexport default Profession\n","import UserListPage from \"./userListPage\"\nexport default UserListPage\n","import React, { useState, useEffect } from \"react\"\nimport Pagination from \"../../common/pagination\"\nimport { paginate } from \"../../../utils/paginate\"\nimport GroupList from \"../../common/groupList\"\nimport SearchStatus from \"../../ui/searchStatus\"\nimport UserTable from \"../../ui/usersTable\"\nimport _ from \"lodash\"\nimport Bookmark from \"../../common/bookmark\"\nimport Qualities from \"../../ui/qualities\"\nimport { Link } from \"react-router-dom\"\nimport SearchRow from \"../../ui/searchRow\"\nimport Profession from \"../../ui/profession\"\nimport { useSelector } from \"react-redux\"\nimport {\n    getProfessions,\n    getProfessionsLoadingStatus\n} from \"../../../store/professions\"\nimport { getCurrentUserId, getUsers } from \"../../../store/users\"\n\nconst UserListPage = () => {\n    const users = useSelector(getUsers())\n    const [searchString, setSearchString] = useState(\"\")\n    const currentUserId = useSelector(getCurrentUserId())\n\n    const onBookmarkToggle = (userId) => {\n        console.log(userId)\n        /* const newUsers = [...users]\n         const userIndex = newUsers.findIndex((user) => user._id === userId)\n         newUsers[userIndex].marked = !newUsers[userIndex].marked\n             ? true\n             : undefined\n         setUsers(newUsers) */\n    }\n\n    const onPage = 6\n    const [currentPage, setCurrentPage] = useState(1)\n    const professions = useSelector(getProfessions())\n    const isProfessionsLoading = useSelector(getProfessionsLoadingStatus())\n    const [selectedProf, setSelectedProf] = useState()\n    const [sortBy, setSortBy] = useState({ sort: \"name\", order: \"asc\" })\n\n    useEffect(() => {\n        setCurrentPage(1)\n    }, [selectedProf])\n\n    if (!users) return \"Loding...\"\n    let filteredUsers = selectedProf\n        ? users.filter((user) => user.profession === selectedProf._id) // ? allUsers.filter((user) => _.isEqual(user.profession, selectedProf))\n        : users\n    filteredUsers = filteredUsers\n        .filter((item) => {\n            return item.name.toLowerCase().includes(searchString.toLowerCase())\n        })\n        .filter((item) => item._id !== currentUserId)\n\n    const count = filteredUsers.length\n\n    const sortedUsers = _.orderBy(filteredUsers, sortBy.sort, sortBy.order)\n\n    const cropUsers = paginate(sortedUsers, onPage, currentPage)\n\n    const onPageChange = (page) => {\n        setCurrentPage(page)\n    }\n\n    const handleProfessionSelect = (item) => {\n        setSelectedProf(item)\n        resetSearchHadler()\n    }\n\n    const handleSort = (item) => {\n        setSortBy(item)\n    }\n\n    const clearFilter = () => {\n        setSelectedProf()\n        setCurrentPage(1)\n    }\n\n    const columns = {\n        name: {\n            name: \"Имя\",\n            path: \"name\",\n            component: (user) => (\n                <Link to={`/users/${user._id}`}>{user.name}</Link>\n            )\n        },\n        qualities: {\n            name: \"Качества\",\n            component: (user) => <Qualities qualities={user.qualities} />\n        },\n        profession: {\n            name: \"Проффесия\",\n            component: (user) => <Profession id={user.profession} />\n        },\n        completedMeetings: {\n            name: \"Встретился, раз\",\n            path: \"completedMeetings\"\n        },\n        rate: {\n            name: \"Оценка\",\n            path: \"rate\"\n        },\n        marked: {\n            name: \"Избранное\",\n            path: \"marked\",\n            component: (user) => (\n                <Bookmark user={user} onToggle={onBookmarkToggle} />\n            )\n        }\n    }\n\n    const searchHadler = (value) => {\n        setSearchString(value)\n        clearFilter()\n    }\n    const resetSearchHadler = () => {\n        setSearchString(\"\")\n    }\n\n    return (\n        <>\n            <div className=\"d-flex\">\n                {professions && !isProfessionsLoading && (\n                    <div className=\"d-flex flex-column flex-shrink-0 p-3\">\n                        <GroupList\n                            selectedItem={selectedProf}\n                            items={professions}\n                            onItemSelect={handleProfessionSelect}\n                        />\n                        <button\n                            onClick={() => clearFilter()}\n                            className=\"btn btn-secondary mt-2\"\n                        >\n                            Очистить\n                        </button>\n                    </div>\n                )}\n                <div className=\"d-flex flex-column w-100\">\n                    <SearchStatus usersCount={count} />\n                    <SearchRow value={searchString} onSearch={searchHadler} />\n                    {count > 0 && (\n                        <UserTable\n                            users={cropUsers}\n                            onSort={handleSort}\n                            selectedSort={sortBy}\n                            columns={columns}\n                        />\n                    )}\n                    <div className=\"d-flex justify-content-center\">\n                        <Pagination\n                            {...{\n                                elementsCount: count,\n                                onPage: onPage,\n                                currentPage: currentPage,\n                                onPageChange: onPageChange\n                            }}\n                        />\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default UserListPage\n","export const paginate = (items, onPage, currentPage) => {\n    return items.slice(\n        (currentPage - 1) * onPage,\n        (currentPage - 1) * onPage + onPage\n    )\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Avatar = ({ hash, className, width, height, alt }) => {\n    const url = \"https://avatars.dicebear.com/api/avataaars/\" + hash + \".svg\"\n    return <img src={url} className={className} width={width} />\n}\n\nAvatar.defaultProps = {\n    width: \"150\",\n    height: \"150\",\n    alt: \"Avatar\",\n    className: \"rounded-circle\"\n}\n\nAvatar.propTypes = {\n    hash: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    width: PropTypes.string,\n    height: PropTypes.string,\n    alt: PropTypes.string\n}\n\nexport default Avatar\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Avatar from \"../common/avatar\"\nimport { useSelector } from \"react-redux\"\nimport { getCurrentUserId } from \"../../store/users\"\n\nconst UserCard = ({ user, onEditUserClick }) => {\n    const currentUserId = useSelector(getCurrentUserId())\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"card-body\">\n                {currentUserId === user._id && (\n                    <button\n                        className=\"position-absolute top-0 end-0 btn btn-light btn-sm\"\n                        onClick={onEditUserClick}\n                    >\n                        <i className=\"bi bi-gear\"></i>\n                    </button>\n                )}\n\n                <div className=\"d-flex flex-column align-items-center text-center position-relative\">\n                    <Avatar hash={user.name} />\n                    <div className=\"mt-3\">\n                        <h4>{user.name}</h4>\n                        <p className=\"text-secondary mb-1\">\n                            {user.profession.name}\n                        </p>\n                        <div className=\"text-muted\">\n                            <i\n                                className=\"bi bi-caret-down-fill text-primary\"\n                                role=\"button\"\n                            ></i>\n                            <i\n                                className=\"bi bi-caret-up text-secondary\"\n                                role=\"button\"\n                            ></i>\n                            <span className=\"ms-2\">{user.rate}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nUserCard.propTypes = {\n    user: PropTypes.object.isRequired,\n    onEditUserClick: PropTypes.func.isRequired\n}\n\nexport default UserCard\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Qualities from \"./qualities\"\n\nconst QualitiesCard = ({ qualities }) => {\n    return (\n        <div className=\"card mb-3\">\n            <div\n                className=\"\n    card-body\n    d-flex\n    flex-column\n    justify-content-center\n    text-center\n\"\n            >\n                <h5 className=\"card-title\">\n                    <span>Qualities</span>\n                </h5>\n                <p className=\"card-text\">\n                    <Qualities qualities={qualities} />\n                </p>\n            </div>\n        </div>\n    )\n}\n\nQualitiesCard.propTypes = {\n    qualities: PropTypes.array.isRequired\n}\n\nexport default QualitiesCard\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst MeetingsCard = ({ completedMeetings }) => {\n    return (\n        <div className=\"card mb-3\">\n            <div\n                className=\"\n        card-body\n        d-flex\n        flex-column\n        justify-content-center\n        text-center\n    \"\n            >\n                <h5 className=\"card-title\">\n                    <span>Completed meetings</span>\n                </h5>\n\n                <h1 className=\"display-1\">{completedMeetings}</h1>\n            </div>\n        </div>\n    )\n}\nMeetingsCard.propTypes = {\n    completedMeetings: PropTypes.number.isRequired\n}\n\nexport default MeetingsCard\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst TextareaField = ({ label, name, value, onChange, rows, error }) => {\n    const onHandleChange = ({ target }) => {\n        const { name, value } = target\n        onChange({ name, value })\n    }\n\n    return (\n        <div className=\"mb-4\">\n            <label htmlFor={name} className=\"form-label\">\n                {label}\n            </label>\n\n            <textarea\n                className={\n                    \"form-control\" + (!error ? \" \" : \" is-invalid\")\n                }\n                id={name}\n                name={name}\n                value={value}\n                rows={rows}\n                onChange={onHandleChange}\n            ></textarea>\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    )\n}\nTextareaField.defaultProps = {\n    type: \"text\",\n    rows: 3\n}\nTextareaField.propTypes = {\n    label: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    rows: PropTypes.number,\n    error: PropTypes.string\n}\n\nexport default TextareaField\n","import httpService from \"./httpService\"\n\nconst commentEndPoint = \"comment/\"\n\nconst commentService = {\n    get: async (id) => {\n        const { data } = await httpService.get(commentEndPoint + id)\n        return data\n    },\n    fetchAll: async () => {\n        const { data } = await httpService.get(commentEndPoint)\n        return data\n    },\n    fetchByPage: async (id) => {\n        const { data } = await httpService.get(commentEndPoint, {\n            params: { orderBy: \"pageId\", equalTo: id }\n        })\n        return data\n    },\n    create: async (content) => {\n        const { data } = await httpService.post(commentEndPoint, content)\n        return data\n    },\n    delete: async (id) => {\n        const { data } = await httpService.delete(commentEndPoint + id)\n        return data\n    }\n}\n\nexport default commentService\n","import { createSlice } from \"@reduxjs/toolkit\"\nimport commentService from \"../services/commentService\"\n\nconst commentsSlice = createSlice({\n    name: \"comments\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null\n    },\n    reducers: {\n        commentsRequested: (state) => {\n            state.isLoading = true\n        },\n        commentsReceived: (state, action) => {\n            state.entities = action.payload\n            state.isLoading = false\n        },\n        commentsRequestFiled: (state, action) => {\n            state.error = action.payload\n            state.isLoading = false\n        },\n        commentRemoveRequested: (state, action) => {},\n        commentRemoved: (state, action) => {\n            state.entities = state.entities.filter(\n                (item) => item._id !== action.payload.commentId\n            )\n        },\n        commentRemoveFiled: (state, action) => {\n            state.error = action.payload\n        },\n        commentCreateRequested: () => {},\n        commentCreated: (state, action) => {\n            state.entities.push(action.payload)\n        },\n        commentCreateFiled: (state, action) => {\n            state.error = action.payload\n        }\n    }\n})\n\nconst { reducer: commentsReducer, actions } = commentsSlice\nconst {\n    commentsRequested,\n    commentsReceived,\n    commentsRequestFiled,\n    commentRemoveRequested,\n    commentRemoved,\n    commentRemoveFiled,\n    commentCreateRequested,\n    commentCreated,\n    commentCreateFiled\n} = actions\n\nexport const loadCommentsList = (pageId) => async (dispatch) => {\n    dispatch(commentsRequested())\n    try {\n        const { content } = await commentService.fetchByPage(pageId)\n        dispatch(commentsReceived(content))\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message))\n    }\n}\n\nexport const removeComment = (commentId) => async (dispatch) => {\n    dispatch(commentRemoveRequested())\n    try {\n        const { content } = await commentService.delete(commentId)\n        if (!content) {\n            dispatch(commentRemoved({ commentId }))\n        }\n    } catch (error) {\n        dispatch(commentRemoveFiled(error.message))\n    }\n}\n\nexport const createComment = (comment) => async (dispatch) => {\n    dispatch(commentCreateRequested())\n    try {\n        const { content: newComment } = await commentService.create(comment)\n        console.log(\"newComment\", newComment)\n        dispatch(commentCreated(newComment))\n    } catch (error) {\n        dispatch(commentCreateFiled(error.message))\n    }\n}\n\nexport const getComments = () => (state) => state.comments.entities\nexport const getCommentsLoadingStatus = () => (state) =>\n    state.comments.isLoading\n\nexport default commentsReducer\n","import React, { useState } from \"react\"\nimport TextareaField from \"../../common/form/textareaField\"\nimport { validator } from \"../../../utils/validator\"\nimport PropTypes from \"prop-types\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { getCurrentUserId } from \"../../../store/users\"\nimport { createComment } from \"../../../store/comments\"\n\nconst NewCommentForm = ({ pageId }) => {\n    const [formData, setFormData] = useState({})\n    const [errors, setErrors] = useState({})\n\n    const currentUserId = useSelector(getCurrentUserId())\n    const dispatch = useDispatch()\n\n    const changeHandler = ({ name, value }) => {\n        setFormData((prevState) => ({ ...prevState, [name]: value }))\n        validate()\n    }\n\n    const validarotConfig = {\n        message: {\n            isRequired: {\n                message: \"Message is required\"\n            }\n        }\n    }\n    const validate = () => {\n        const errors = validator(formData, validarotConfig)\n        setErrors(errors)\n        return Object.keys(errors).length === 0\n    }\n    const isValid = Object.keys(errors).length === 0\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        if (validate()) {\n            dispatch(\n                createComment({\n                    userId: currentUserId,\n                    pageId,\n                    content: formData.message\n                })\n            )\n            setFormData({})\n        }\n    }\n\n    return (\n        <div className=\"card mb-2\">\n            <div className=\"card-body\">\n                <div>\n                    <h2>New comment</h2>\n                    <form onSubmit={handleSubmit}>\n                        <TextareaField\n                            label=\"Message\"\n                            name=\"message\"\n                            value={formData.message || \"\"}\n                            onChange={changeHandler}\n                            error={errors.message}\n                        />\n\n                        <button\n                            className=\"btn btn-primary float-end\"\n                            disabled={!isValid}\n                        >\n                            Publish\n                        </button>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nNewCommentForm.propTypes = {\n    pageId: PropTypes.string\n}\n\nexport default NewCommentForm\n","const monthNames = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n]\n\nconst padding = (value, count) => {\n    count = count ?? 2\n    return String(value).padStart(count, \"0\")\n}\n\nexport const dateFormat = (dateString) => {\n    const now = new Date()\n    const date = new Date(dateString)\n    const diff = Math.floor((now.getTime() - date.getTime()) / 1000 / 60)\n\n    if (diff < 1) {\n        return \"1 минуту назад\"\n    } else if (diff < 5) {\n        return \"5 минут назад\"\n    } else if (diff < 10) {\n        return \"10 минут назад\"\n    } else if (diff < 30) {\n        return \"30 минут назад\"\n    } else if (\n        date.getFullYear() === now.getFullYear() &&\n        date.getMonth() === now.getMonth() &&\n        date.getDate() === now.getDate()\n    ) {\n        // Если текущий день, выводим только время\n        return date.getHours() + \":\" + date.getMinutes()\n    } else if (date.getFullYear() === now.getFullYear()) {\n        // Если текущий год\n        return monthNames[date.getMonth()] + \" \" + date.getDate()\n    } else {\n        // Выводим DD.MM.YYYY\n        return (\n            padding(date.getDate()) +\n            \".\" +\n            padding(date.getMonth() + 1) +\n            \".\" +\n            date.getFullYear()\n        )\n    }\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Avatar from \"../../common/avatar\"\nimport { dateFormat } from \"../../../utils/dateFormat\"\nimport { getCurrentUserId, getUserById } from \"../../../store/users\"\nimport { useSelector } from \"react-redux\"\n\nconst Comment = ({ comment, onDeleteClick }) => {\n    const { userId } = comment\n    const currentUserId = useSelector(getCurrentUserId())\n    const user = useSelector(getUserById(userId))\n\n    return (\n        <div className=\"bg-light card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    {user && (\n                        <div className=\"d-flex flex-start\">\n                            <Avatar\n                                hash={user.name}\n                                width=\"65\"\n                                height=\"65\"\n                                alt=\"avatar\"\n                                className=\"rounded-circle shadow-1-strong me-3\"\n                            />\n\n                            <div className=\"flex-grow-1 flex-shrink-1\">\n                                <div className=\"mb-4\">\n                                    <div className=\"d-flex justify-content-between align-items-center\">\n                                        <p className=\"mb-1\">\n                                            {user.name}\n                                            <span className=\"small ms-2\">\n                                                {dateFormat(comment.created_at)}\n                                            </span>\n                                        </p>\n                                        {currentUserId === userId && (\n                                            <button\n                                                className=\"btn btn-sm text-primary d-flex align-items-center\"\n                                                onClick={() =>\n                                                    onDeleteClick(comment._id)\n                                                }\n                                            >\n                                                <i className=\"bi bi-x-lg\"></i>\n                                            </button>\n                                        )}\n                                    </div>\n                                    <p className=\"small mb-0\">\n                                        {comment.content}\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    {!user && \"loading...\"}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nComment.propTypes = {\n    comment: PropTypes.object.isRequired,\n    onDeleteClick: PropTypes.func.isRequired\n}\n\nexport default Comment\n","import React, { useEffect } from \"react\"\nimport Comment from \"./comment\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {\n    getComments,\n    getCommentsLoadingStatus,\n    loadCommentsList,\n    removeComment\n} from \"../../../store/comments\"\nimport PropTypes from \"prop-types\"\n\nconst CommentsList = ({ pageId }) => {\n    const dispatch = useDispatch()\n    const comments = useSelector(getComments())\n    const isLoading = useSelector(getCommentsLoadingStatus())\n\n    const onDeleteCommentHandler = (id) => {\n        dispatch(removeComment(id))\n    }\n\n    useEffect(() => {\n        dispatch(loadCommentsList(pageId))\n    }, [pageId])\n\n    return (\n        <div className=\"card mb-3\">\n            <div className=\"card-body\">\n                <h2>Comments</h2>\n                <hr />\n                {!isLoading &&\n                    [...comments]\n                        .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\n                        .map((comment) => (\n                            <Comment\n                                comment={comment}\n                                key={comment._id}\n                                onDeleteClick={onDeleteCommentHandler}\n                            />\n                        ))}\n                {isLoading && \"Loading...\"}\n            </div>\n        </div>\n    )\n}\n\nCommentsList.propTypes = {\n    pageId: PropTypes.string\n}\n\nexport default CommentsList\n","import UserPage from \"./userPage\"\nexport default UserPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useHistory } from \"react-router\"\nimport UserCard from \"../../ui/userCard\"\nimport QualitiesCard from \"../../ui/qualitiesCard\"\nimport MeetingsCard from \"../../ui/meetingsCard\"\nimport { CommentsList, NewCommentForm } from \"../../ui/comments\"\nimport { getUserById } from \"../../../store/users\"\nimport { useSelector } from \"react-redux\"\n\nconst UserPage = ({ id }) => {\n    const user = useSelector(getUserById(id))\n    const history = useHistory()\n\n    const editUserHandle = () => {\n        history.push(\"/users/\" + id + \"/edit\")\n    }\n\n    if (!user) return <>Loading...</>\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"row gutters-sm\">\n                    <div className=\"col-md-4 mb-3\">\n                        <UserCard\n                            user={user}\n                            onEditUserClick={editUserHandle}\n                        />\n                        <QualitiesCard qualities={user.qualities} />\n                        <MeetingsCard\n                            completedMeetings={user.completedMeetings}\n                        />\n                    </div>\n\n                    <div className=\"col-md-8\">\n                        <NewCommentForm pageId={id} />\n                        <CommentsList pageId={id} />\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\nUserPage.propTypes = {\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired\n}\n\nexport default UserPage\n","import UserEditPage from \"./userEditPage\"\nexport default UserEditPage\n","import React, { useEffect, useState } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useHistory } from \"react-router\"\nimport TextField from \"../../common/form/textField\"\nimport { validator } from \"../../../utils/validator\"\nimport SelectField from \"../../common/form/selectField\"\nimport MultiSelectField from \"../../common/form/multiSelectField\"\nimport RadioField from \"../../common/form/radioField\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {\n    getQualities,\n    getQualitiesLoadingStatus\n} from \"../../../store/qualities\"\nimport {\n    getProfessions,\n    getProfessionsLoadingStatus\n} from \"../../../store/professions\"\nimport {\n    getCurrentUserData,\n    getUserById,\n    updateUser\n} from \"../../../store/users\"\n\nconst UserEditPage = ({ id }) => {\n    const history = useHistory()\n\n    const dispatch = useDispatch()\n    const currentUser = useSelector(getCurrentUserData())\n    if (currentUser._id !== id) {\n        setTimeout(() => {\n            history.push(`/users/${currentUser._id}/edit`)\n        })\n    }\n    const user = useSelector(getUserById(id))\n    const [formData, setFormData] = useState(user)\n    const professions = useSelector(getProfessions())\n    const isProfessionsLoading = useSelector(getProfessionsLoadingStatus())\n    const qualities = useSelector(getQualities())\n    const isQualitiesLoading = useSelector(getQualitiesLoadingStatus())\n    const [errors, setErrors] = useState({})\n\n    useEffect(() => {\n        validate()\n    }, [formData])\n\n    const validarotConfig = {\n        name: {\n            isRequired: {\n                message: \"Name is required\"\n            }\n        },\n        email: {\n            isRequired: {\n                message: \"Email is required\"\n            },\n            isEmail: {\n                message: \"Email is incorected\"\n            }\n        }\n    }\n\n    const validate = () => {\n        const errors = validator(formData, validarotConfig)\n        setErrors(errors)\n        return Object.keys(errors).length === 0\n    }\n    const isValid = Object.keys(errors).length === 0\n\n    const changeHandler = ({ name, value }) => {\n        if (name === \"qualities\") {\n            value = value.map((item) => item.value)\n        }\n        setFormData((prevState) => ({ ...prevState, [name]: value }))\n    }\n    const handleSubmit = async (event) => {\n        event.preventDefault()\n\n        if (validate()) {\n            dispatch(updateUser(formData))\n            await updateUser(formData)\n            goBackHandler()\n        }\n    }\n\n    const goBackHandler = () => {\n        history.push(\"/users/\" + id + \"\")\n    }\n\n    if (!formData || isProfessionsLoading || isQualitiesLoading) {\n        return <>Loading...</>\n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <button className=\"btn btn-primary\" onClick={goBackHandler}>\n                    Go back\n                </button>\n                <form onSubmit={handleSubmit}>\n                    <TextField\n                        label=\"Name\"\n                        name=\"name\"\n                        value={formData.name}\n                        onChange={changeHandler}\n                        error={errors?.name}\n                    />\n                    <TextField\n                        label=\"Email\"\n                        name=\"email\"\n                        value={formData.email}\n                        onChange={changeHandler}\n                        error={errors?.email}\n                    />\n                    <SelectField\n                        label=\"Profession\"\n                        name=\"profession\"\n                        value={formData.profession}\n                        onChange={changeHandler}\n                        options={professions.map((profession) => ({\n                            name: profession.name,\n                            value: profession._id\n                        }))}\n                        error={errors?.profession}\n                        defaultOption=\"Choose...\"\n                    />\n                    <RadioField\n                        options={[\n                            { name: \"Male\", value: \"male\" },\n                            { name: \"Female\", value: \"female\" },\n                            { name: \"Other\", value: \"other\" }\n                        ]}\n                        value={formData.sex || \"other\"}\n                        onChange={changeHandler}\n                        name=\"sex\"\n                        label=\"Sex\"\n                    />\n                    <MultiSelectField\n                        options={qualities.map((item) => ({\n                            label: item.name,\n                            value: item._id\n                        }))}\n                        onChange={changeHandler}\n                        name=\"qualities\"\n                        label=\"Qualities\"\n                        value={formData.qualities.map((qualityId) => ({\n                            label: qualities.find(\n                                (item) => item._id === qualityId\n                            ).name,\n                            value: qualityId\n                        }))}\n                    />\n                    <button\n                        disabled={!isValid}\n                        className=\"btn btn-primary w-100\"\n                    >\n                        Save\n                    </button>\n                </form>\n            </div>\n        </>\n    )\n}\nUserEditPage.propTypes = {\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired\n}\n\nexport default UserEditPage\n","import { useDispatch, useSelector } from \"react-redux\"\nimport { getDataStatus, loadUsersList } from \"../../../store/users\"\nimport { useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst UsersLoader = ({ children }) => {\n    const dataStatus = useSelector(getDataStatus())\n    const dispatch = useDispatch()\n    useEffect(() => {\n        if (!dataStatus) {\n            dispatch(loadUsersList())\n        }\n    }, [])\n    if (!dataStatus) return \"Loading...\"\n    return children\n}\nexport default UsersLoader\nUsersLoader.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n}\n","import React from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport UserListPage from \"../components/page/userListPage\"\nimport UserPage from \"../components/page/userPage\"\nimport UserEditPage from \"../components/page/userEditPage\"\nimport UsersLoader from \"../components/ui/hoc/usersLoader\"\n\nconst UsersPage = () => {\n    const params = useParams()\n    const { userID, edit } = params\n    let mode = \"list\"\n    if (userID && edit) {\n        mode = \"edit\"\n    } else if (userID) {\n        mode = \"view\"\n    }\n    return (\n        <>\n            <UsersLoader>\n                {mode === \"view\" && <UserPage id={userID} />}\n                {mode === \"edit\" && <UserEditPage id={userID} />}\n                {mode === \"list\" && <UserListPage />}\n            </UsersLoader>\n        </>\n    )\n}\n\nUsersPage.defaultProps = {\n    mode: \"view\"\n}\nUsersPage.propTypes = {}\n\nexport default UsersPage\n","import React, { useState } from \"react\"\nimport Avatar from \"../common/avatar\"\nimport { Link } from \"react-router-dom\"\nimport { useSelector } from \"react-redux\"\nimport { getCurrentUserData } from \"../../store/users\"\n\nconst NavProfile = () => {\n    const currentUser = useSelector(getCurrentUserData())\n    const [isOpen, setOpen] = useState(false)\n    const toggleMenu = () => {\n        setOpen((prevState) => !prevState)\n    }\n    if (!currentUser) return \"Loading\"\n    return (\n        <div className=\"dropdown\" onClick={toggleMenu}>\n            <div className=\"btn dropdown-toggle d-flex align-items-center\">\n                <div className=\"me-2\">{currentUser.name}</div>\n                <Avatar\n                    hash={currentUser.name}\n                    width=\"40\"\n                    height=\"40\"\n                    alt=\"avatar\"\n                    className=\"img-responsive rounded-circle\"\n                />\n            </div>\n            <div className={\"w-100 dropdown-menu\" + (isOpen ? \" show\" : \"\")}>\n                <Link\n                    to={`/users/${currentUser._id}`}\n                    className=\"dropdown-item\"\n                >\n                    Profile\n                </Link>\n                <Link to={`/logout/`} className=\"dropdown-item\">\n                    Log Out\n                </Link>\n            </div>\n        </div>\n    )\n}\nexport default NavProfile\n","import React from \"react\"\nimport { NavLink } from \"react-router-dom\"\nimport NavProfile from \"./navProfile\"\nimport { useSelector } from \"react-redux\"\nimport { getIsLoggedIn } from \"../../store/users\"\n\nconst MainMenu = () => {\n    const isLoggedIn = useSelector(getIsLoggedIn())\n    return (\n        <nav className=\"navbar bg-light mb-3\">\n            <div className=\"container-fluid\">\n                <ul className=\"nav nav-pills\">\n                    <li className=\"nav-item\">\n                        <NavLink\n                            to=\"/\"\n                            exact\n                            className=\"nav-link\"\n                            activeClassName=\"active\"\n                        >\n                            Main\n                        </NavLink>\n                    </li>\n                    {isLoggedIn && (\n                        <li className=\"nav-item\">\n                            <NavLink\n                                to=\"/users\"\n                                className=\"nav-link\"\n                                activeClassName=\"active\"\n                            >\n                                Users\n                            </NavLink>\n                        </li>\n                    )}\n                </ul>\n                <div className=\"d-flex\">\n                    {isLoggedIn && <NavProfile />}\n                    {!isLoggedIn && (\n                        <NavLink\n                            to=\"/login\"\n                            className=\"nav-link\"\n                            activeClassName=\"active\"\n                        >\n                            Login\n                        </NavLink>\n                    )}\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nexport default MainMenu\n","import React from \"react\"\nimport { Redirect, Route } from \"react-router-dom\"\nimport PropTypes from \"prop-types\"\nimport { getIsLoggedIn } from \"../../store/users\"\nimport { useSelector } from \"react-redux\"\n\nconst ProtectedRoute = ({ component: Component, children, ...rest }) => {\n    const isLoggedIn = useSelector(getIsLoggedIn())\n    return (\n        <Route\n            {...rest}\n            render={(props) => {\n                if (!isLoggedIn) {\n                    return (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: { from: props.location }\n                            }}\n                        />\n                    )\n                }\n                return Component ? <Component {...props} /> : children\n            }}\n        />\n    )\n}\nProtectedRoute.propTypes = {\n    component: PropTypes.func,\n    location: PropTypes.object,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n}\nexport default ProtectedRoute\n","import React, { useEffect } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport { logOut } from \"../store/users\"\n\nconst LogoutPage = () => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(logOut())\n    }, [])\n    return <h1>Loading...</h1>\n}\nexport default LogoutPage\n","import PropTypes from \"prop-types\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useEffect } from \"react\"\nimport { loadQualitiesList } from \"../../../store/qualities\"\nimport { loadProfessionsList } from \"../../../store/professions\"\nimport {\n    getIsLoggedIn,\n    getUsersLoadingStatus,\n    loadUsersList\n} from \"../../../store/users\"\n\nconst AppLoader = ({ children }) => {\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector(getIsLoggedIn())\n    const usersStatusLoading = useSelector(getUsersLoadingStatus())\n    useEffect(() => {\n        dispatch(loadQualitiesList())\n        dispatch(loadProfessionsList())\n        if (isLoggedIn) dispatch(loadUsersList())\n    }, [isLoggedIn])\n    if (usersStatusLoading) return \"Loading...\"\n    return children\n}\nAppLoader.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n}\nexport default AppLoader\n","import React from \"react\"\nimport { Switch, Route, Router } from \"react-router-dom\"\nimport MainPage from \"./loyout/mainPage\"\nimport LoginPage from \"./loyout/loginPage\"\nimport UsersPage from \"./loyout/usersPage\"\nimport MainMenu from \"./components/ui/mainMenu\"\nimport { ToastContainer } from \"react-toastify\"\nimport \"react-toastify/dist/ReactToastify.css\"\nimport ProtectedRoute from \"./components/common/protectedRoute\"\nimport LogoutPage from \"./loyout/logoutPage\"\n\nimport history from \"./utils/history\"\nimport AppLoader from \"./components/ui/hoc/appLoader\"\n\nconst App = () => {\n    return (\n        <>\n            <Router history={history}>\n                <AppLoader>\n                    <MainMenu />\n                    <Switch>\n                        <Route path=\"/\" exact component={MainPage} />\n\n                        <Route path=\"/login/:type?\" component={LoginPage} />\n                        <Route path=\"/logout\" component={LogoutPage} />\n\n                        <ProtectedRoute\n                            path=\"/users/:userID?/:edit?\"\n                            exact={true}\n                            component={UsersPage}\n                        />\n                    </Switch>\n                </AppLoader>\n                <ToastContainer />\n            </Router>\n        </>\n    )\n}\n\nexport default App\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\"\nimport qualitiesReducer from \"./qualities\"\nimport professionsReducer from \"./professions\"\nimport usersReducer from \"./users\"\nimport commentsReducer from \"./comments\"\n\nconst rootReducer = combineReducers({\n    qualities: qualitiesReducer,\n    professions: professionsReducer,\n    users: usersReducer,\n    comments: commentsReducer\n})\n\nexport function createStore() {\n    return configureStore({\n        reducer: rootReducer\n    })\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport \"bootstrap/dist/css/bootstrap.css\"\n\nimport App from \"./app\"\nimport { createStore } from \"./store/createStore\"\nimport { Provider } from \"react-redux\"\n\nconst store = createStore()\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}